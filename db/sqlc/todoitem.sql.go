// Code generated by sqlc. DO NOT EDIT.
// source: todoitem.sql

package sqlc

import (
	"context"
)

const createItem = `-- name: CreateItem :one
INSERT INTO items (
  title
) VALUES (
  $1
) RETURNING id, title, created_at, completed
`

func (q *Queries) CreateItem(ctx context.Context, title string) (Item, error) {
	row := q.queryRow(ctx, q.createItemStmt, createItem, title)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.CreatedAt,
		&i.Completed,
	)
	return i, err
}

const getItem = `-- name: GetItem :one
SELECT id, title, created_at, completed FROM items
WHERE id = $1
`

func (q *Queries) GetItem(ctx context.Context, id int32) (Item, error) {
	row := q.queryRow(ctx, q.getItemStmt, getItem, id)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.CreatedAt,
		&i.Completed,
	)
	return i, err
}

const listItems = `-- name: ListItems :many
SELECT id, title, created_at, completed FROM items
ORDER BY created_at
`

func (q *Queries) ListItems(ctx context.Context) ([]Item, error) {
	rows, err := q.query(ctx, q.listItemsStmt, listItems)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Item
	for rows.Next() {
		var i Item
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.CreatedAt,
			&i.Completed,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
